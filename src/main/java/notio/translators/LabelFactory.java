package notio.translators;

import java.util.*;
import java.io.Serializable;

    /** 
     * A class for generating labels for use as variables, etc.
     * By default, this factory initially generates single-letter labels starting with
     * a lower case "a".  
     * When it runs out of single letter labels, it starts on double letter labels,
     * beginning with "aa", "ab", etc.  It will increment the letters from right to left 
     * in the labels as it progresses.  Factories can
     * also be specified to start with a particular string as a label.
     * Note that upper case letters are not used as the labels are intended to be used
     * case-insensitively.
     * <P>Thus the factory will generate:<BR>
     * "a"-"z", "aa"-"az", "ba"-bz", ... , "zz", "aaa"-"zzz", etc.
     *
     * @author Finnegan Southey
     * @version $Name:  $ $Revision: 1.6 $, $Date: 1999/05/06 02:53:31 $
		 * @legal Copyright (c) Finnegan Southey, 1996-1999
		 *	This program is free software; you can redistribute it and/or modify it 
		 *	under the terms of the GNU Library General Public License as published 
		 *	by the Free Software Foundation; either version 2 of the License, or 
		 *	(at your option) any later version.  This program is distributed in the 
		 *	hope that it will be useful, but WITHOUT ANY WARRANTY; without even the 
		 *	implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
		 *	See the GNU Library General Public License for more details.  You should 
		 *	have received a copy of the GNU Library General Public License along 
		 *	with this program; if not, write to the Free Software Foundation, Inc., 
		 *	675 Mass Ave, Cambridge, MA 02139, USA.
     *
     * @idea Should we expose this class in the API?  Might be generally useful.
     */
class LabelFactory implements Serializable
  {
  /** The next available label. **/
  private String nextLabel = "a";
  /** The label produced. **/
  private String lastLabel = null;

    /**
     * Constructs a new label factory.
     */
  public LabelFactory()
    {
    }
    
    /**
     * Constructs a new label factory using the specified label as the next available
     * label.
     *
     * @param newFirstLabel  the first label that should be generated by this
     * factory.
     */
  public LabelFactory(String newFirstLabel)
    {
    nextLabel = newFirstLabel;
    }
    
    /**
     * Returns a new label.
     *
     * @return a new label.
     */
  public String getNextLabel()
    {
    int labelLength, currPos;
    String newLabel, currentLabel;

    currentLabel = nextLabel;
    
    labelLength = nextLabel.length();
    currPos = labelLength - 1;
    while ((currPos >= 0) && (nextLabel.charAt(currPos) == 'z'))
      currPos--;
      
    if (currPos < 0)
      {
      // The string is all z's so we must increase the length by one and fill it with a's.
      nextLabel = "";
      for (int count = 0; count < labelLength + 1; count++)
        nextLabel += "a";
      }
    else
      {
      // Increment the character at the current position
      char x[] = new char[1];
      
      if (currPos > 0)
        newLabel = nextLabel.substring(0, currPos);
      else
        newLabel = "";

      x[0] = (char)(nextLabel.charAt(currPos) + 1);
      newLabel += new String(x);
      
      if (currPos < labelLength - 1)
        newLabel += nextLabel.substring(currPos + 1, labelLength);
        
      nextLabel = newLabel;
      }

    lastLabel = currentLabel;
    
    return currentLabel;
    }

    /**
     * Returns the last label produced by this factory or null if no labels have
     * been produced since it was constructed or reset.  Note that this method does
     * cause the factory to generate any new labels.
     *
     * @return the last label produced by this factory.
     */
  public String getLastLabel()
    {
    return lastLabel;
    }
    
    /**
     * Resets this factory to use the specified label as the next available
     * label.
     *
     * @param newFirstLabel  the first label that should be generated by this
     * factory.
     */
  public void resetFactory(String newFirstLabel)
    {
    nextLabel = newFirstLabel;
    lastLabel = null;
    }
  }
