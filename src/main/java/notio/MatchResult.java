package notio;

    /** 
     * A class for reporting the results of a match operation.  
     * For most types of match, this is simply a boolean result, but
     * for some match types, it also contains node mappings.
     *
     * @author Finnegan Southey
     * @version $Name:  $ $Revision: 1.8 $, $Date: 1999/05/04 01:35:55 $
		 * @legal Copyright (c) Finnegan Southey, 1996-1999
		 *	This program is free software; you can redistribute it and/or modify it 
		 *	under the terms of the GNU Library General Public License as published 
		 *	by the Free Software Foundation; either version 2 of the License, or 
		 *	(at your option) any later version.  This program is distributed in the 
		 *	hope that it will be useful, but WITHOUT ANY WARRANTY; without even the 
		 *	implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
		 *	See the GNU Library General Public License for more details.  You should 
		 *	have received a copy of the GNU Library General Public License along 
		 *	with this program; if not, write to the Free Software Foundation, Inc., 
		 *	675 Mass Ave, Cambridge, MA 02139, USA.
     * @bug The semantics of whether an operation can return a mapping or not need to be
     * tightened a trifle.  Is there any point to allowing empty mappings?
     */

public class MatchResult
  {
  /** A flag indicating whether the match was successful or not. **/
  private boolean matchSucceeded;
  
  /** An array of NodeMappings that describe the matches found. **/
  private NodeMapping mappings[];

    /**
     * Constructs a new MatchResult with the specified result flag.
     *
     * @param resultFlag  a boolean value indicating whether the match was successful or not.
     */
  public MatchResult(boolean resultFlag)
  	{
  	matchSucceeded = resultFlag;
  	}

    /**
     * Constructs a new MatchResult with the specified mappings.
     * The array of mappings must not be null although it could be empty.
     *
     * @param newMappings  an array of node mappings that describe the
     * matches found.
     */
  public MatchResult(NodeMapping newMappings[])
  	{
  	if (newMappings == null)
  		throw new IllegalArgumentException("NodeMappings array cannot be null.");

  	if (newMappings.length > 0)
			{  	
	  	mappings = new NodeMapping[newMappings.length];
  		System.arraycopy(newMappings, 0, mappings, 0, newMappings.length);
  		matchSucceeded = mappings.length >= 1;
  		}
  	}

		/**
		 * Returns true if one or matches were found.
		 *
		 * @return true if one or matches were found.
		 */
	public boolean matchSucceeded()
		{
		return matchSucceeded;
		}
  	
  	/**
  	 * Returns the number of matches (mappings) found.
  	 * If no mappings were involved in the match operation, a 1 is returned.
  	 *
  	 * @return the number of matches found.
  	 */
	public int getNumberOfMatches()
		{
		if (mappings == null)
			return 1;
		else
			return mappings.length;
		}
  	
  	/**
  	 * Returns the node mappings generated by the match (if any).
  	 * If the match failed, this method will return null.
  	 *
  	 * @return an array containing node mappings generated by the match or null if the
  	 * match failed.
  	 */
  public NodeMapping[] getMappings()
  	{
  	NodeMapping arr[];
  	
  	if (mappings == null)
  		return null;
  	
  	arr = new NodeMapping[mappings.length];
  	System.arraycopy(mappings, 0, arr, 0, mappings.length);
  	
  	return arr;
  	}
  }
